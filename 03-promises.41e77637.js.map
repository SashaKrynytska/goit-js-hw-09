{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,MAAO,QACPC,SAAU,WACVC,SAAU,QACVC,QAAS,IAGX,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,MAAOF,SAASC,cAAc,kBAC9BE,KAAMH,SAASC,cAAc,iBAC7BG,OAAQJ,SAASC,cAAc,oBAwBjC,SAASI,EAAcV,EAAUO,GAC/B,OAAO,IAAII,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEZ,E,MAAUO,IAEpBM,EAAO,C,SAAEb,E,MAAUO,GAAQ,GAE5BA,EAAM,G,CA9BbJ,EAAKC,KAAKc,iBAAiB,UAAUC,IACnCA,EAAMC,iBAEN,IAAIC,EAAQC,OAAOnB,EAAKI,MAAMgB,OAC1Bf,EAAOc,OAAOnB,EAAKK,KAAKe,OACxBd,EAASa,OAAOnB,EAAKM,OAAOc,QAE5BF,GAAS,GAAKb,GAAQ,GAAKC,GAAU,IACvCb,EAAAF,GAASG,OAAO2B,QAAQ,iCAE1B,IAAK,IAAIC,EAAI,EAAGA,EAAIhB,EAAQgB,GAAK,EAC/Bf,EAAce,EAAI,EAAGJ,EAAQb,EAAOiB,GACjCC,MAAK,EAAC1B,SAAEA,EAAQO,MAAEA,MACjBX,EAAAF,GAASG,OAAO8B,QAAQ,qBAAqB3B,QAAeO,MAAU,IAEvEqB,OAAM,EAAC5B,SAAEA,EAAQO,MAAEA,MAClBX,EAAAF,GAASG,OAAO2B,QAAQ,oBAAoBxB,QAAeO,MAAU,GACrE","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  width: '280px',\n  position: 'left-top',\n  distance: '200px',\n  opacity: 1,\n});\n\nconst refs = {\n  form: document.querySelector('form'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n  amount: document.querySelector('[name=\"amount\"]'),\n};\n\nrefs.form.addEventListener('submit', event => {\n  event.preventDefault();\n\n  let delay = Number(refs.delay.value);\n  let step = Number(refs.step.value);\n  let amount = Number(refs.amount.value);\n\n  if (delay <= 0 || step <= 0 || amount <= 0) {\n    Notiflix.Notify.failure(`Inputs need to be filled (>0)`);\n  }\n  for (let i = 0; i < amount; i += 1) {\n    createPromise(i + 1, delay + step * i)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$parcel$interopDefault","Notify","init","width","position","distance","opacity","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$createPromise","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","failure","i","then","success","catch"],"version":3,"file":"03-promises.41e77637.js.map"}